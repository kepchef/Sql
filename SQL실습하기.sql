#날짜:2020/11/17
#이름:김은표
#내용:SQL실습하기

#직원테이블 생설하기
CREATE TABLE `MEMBER`(
	`UID`		VARCHAR(10) PRIMARY KEY,
	`NAME`	VARCHAR(10),
	`GENDER` TINYINT,
	`HP`		CHAR(13),
	`EMAIL`  VARCHAR(40),
	`POS`		VARCHAR(10),
	`DEP`		TINYINT,
	`RDATE`  DATETIME,
);

INSERT INTO `MEMBER` VALUES('A101','김유신','010-1234-1111','사원',101, '2019-05-19 14:54:49');
INSERT INTO `MEMBER` VALUES('A102','김춘추','010-1234-2222','차장',101, NOW());
INSERT INTO `MEMBER` VALUES('A103','장보고','010-1234-3333','대리',103, NOW());
INSERT INTO `MEMBER` VALUES('A104','강감찬','010-1234-4444','과장',102, NOW());
INSERT INTO `MEMBER` VALUES('A105','이성계','010-1234-5555','차장',102, NOW());
INSERT INTO `MEMBER` VALUES('A106','이순신','010-1234-6666','부장',103, NOW());
INSERT INTO `MEMBER` VALUES('A107','정약용','010-1234-7777','사원',103, NOW());


#부서테이블 생설하기
CREATE TABLE `DEPART`(
	`DEP` 	TINYINT PRIMARY KEY,
	`NAME`	VARCHAR(10)
	);
	
INSERT INTO `DEPART` VALUES (101,'영업1부');
INSERT INTO `DEPART` VALUES (102,'영업2부');
INSERT INTO `DEPART` VALUES (103,'영업3부');
INSERT INTO `DEPART` VALUES (104,'영업4부');
INSERT INTO `DEPART` VALUES (105,'영업5부');
INSERT INTO `DEPART` VALUES (106,'영업지원부');
INSERT INTO `DEPART` VALUES (107,'인사부');


#매출테이블 생설하기
CREATE TABLE `SALE_2017`(
	`SEQ`  	INT AUTO_INCREMENT PRIMARY KEY,
	`UID` 	VARCHAR(10),
	`MTH` 	TINYINT,
	`SALE`	INT
);

INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A101', 1, 98100);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A102', 1, 36500);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A103', 1, 80100);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A104', 1, 78000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A101', 2, 93000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A102', 2, 23500);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A103', 2, 126000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A104', 2, 8500);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A105', 2, 19000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A102', 3, 53000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A103', 3, 24000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A104', 3, 109000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A105', 3, 101000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A102', 4, 53000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A103', 4, 24000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A105', 4, 109000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A106', 4, 101000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A102', 5, 53000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A103', 5, 24000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A105', 5, 109000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A106', 5, 101000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A103', 6, 53000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A104', 6, 24000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A105', 6, 109000);
INSERT INTO `SALE_2017` (`UID`,`MTH`,`SALE`) VALUES('A107', 6, 101000);


#실습하기 4-1
SELECT * FROM `MEMBER` WHERE `NAME` = '김유신';
SELECT * FROM `MEMBER` WHERE `POS` = '차장' AND `DEP`='101';
SELECT * FROM `MEMBER` WHERE `NAME` <> '김춘추';
SELECT * FROM `MEMBER` WHERE `NAME` != '김춘추';
SELECT * FROM `MEMBER` WHERE `DEP` IN (101,102,103);
SELECT * FROM `MEMBER` WHERE `NAME` LIKE '%신';

#실습하기 4-2
SELECT * FROM `SALE_2017` ORDER BY `SALE`;
SELECT * FROM `SALE_2017` ORDER BY `SALE` = 'ASC';
SELECT * FROM `SALE_2017` ORDER BY `SALE` = 'DESC';
SELECT * FROM `MEMBER` ORDER BY `RDATA` 'ASC';

SELECT * FROM `SALE_2017` 
WHERE `SALE` > 30000
ORDER BY `SALE` = 'DESC';

#실습하기 4-3
SELECT * FROM `SALE_2017` LIMIT 0,3;
SELECT * FROM `SALE_2017` 
WHERE `SALE` <50000
ORDER BY `SALE` DESC
LIMIT 3;

#실습하기 4-4
SELECT `UID`, SUM(`SALE`) AS `합계` FROM `SALE_2017`;
SELECT `UID`, AVG(`SALE`) AS `평균` FROM `SALE_2017`;
SELECT `UID`, MAX(`SALE`) AS `최대값`FROM `SALE_2017`;
SELECT `UID`, MIN(`SALE`) AS `최소값` FROM `SALE_2017`;
SELECT `UID`, COUNT(`SALE`) AS `갯수` FROM `SALE_2017`;
SELECT `UID`, COUNT(*) AS `갯수` FROM `SALE_2017`;
SELECT `UID`, SUBSTRING(HP,10,4) AS `전화번호 끝자리`FROM`MEMBER`;
INSERT INTO `MEMBER`(UID, NAME,HP,POS,DEP,RDATE) VALUES('B101','을지문덕','010-555-1234','부사장',105, NOW());

#실습하기 4-5
SELECT * FROM `SALE_2017` GROUP BY `UID`;
SELECT `UID` * COUNT(*) FROM `SALE_2017` GROUP BY `UID`;
SELECT `UID` * COUNT(*),SUM(`SALE`) FROM `SALE_2017` GROUP BY `UID`;
SELECT `UID` * SUM(`SALE`) AS `건수` FROM `SALE_2017` GROUP BY `UID`;
SELECT `UID`, SUM(`SALE`) AS `합계`
FROM `SALE_2017`
WHERE `SALE` >= 50000
GROUP BY `UID`
ORDER BY `합계` DESC;

#실습하기 4-6
SELECT `UID`, SUM(`SALE`) AS `합계`FROM `SALE_2017` GROUP BY `UID` HAVING SUM(`SALE`) >= 100000;

SELECT `UID`, SUM(`SALE`) AS `합계`
FROM `SALE`
WHERE `SALE`>= 50000
GROUP BY `UID`
HAVING SUM(`SALE`) >= 150000
ORDER BY `합계` DESC;

#실습하기 4-7
CREATE TABLE `SALE_2018` LIKE `SALE_2017`;
INSERT INTO `SALE_2018` SELECT * FROM `SALE_2017`;

UPDATE `SALE_2018` SET `SALE`=`SALE`+1;

SELECT * FROM `SALE_2018` UNION SELECT * FROM `SALE_2017`; 

SELECT `SEQ`,`UID`,`SALE` FROM `SALE_2018` UNION SELECT `SEQ`,`UID`,`SALE` FROM `SALE_2017;


SELECT `SEQ`,`UID`,`SALE` FROM `SALE_2018` WHERE `SALE` >= 50000
UNION
SELECT `SEQ`,`UID`,`SALE` FROM `SALE_2017` WHERE `SALE` >= 50000;


#실습하기 4-8
SELECT * FROM `SALE_2018` UNION ALL SELECT * FROM `SALE_2017`;

SELECT * FROM `SALE_2018` WHERE `SALE` >= 50000 
UNION
ALL SELECT * FROM `SALE_2017` WHERE `SALE` >= 50000;

#실습하기 4-9
SELECT * FROM `SALE_2017` INNER JOIN `MEMBER` ON `SALE_2017`.UID=`MEMBER`.UID;
SELECT `SALE_2017`.SEQ, `SALE_2017`.UID, SALE, NAME, POS FROM `SALE_2017`
JOIN `MEMBER` ON `SALE_2017`.UID= `MEMBER`.UID;

SELECT * FROM `SALE_2017` AS A
JOIN `MEMBER` AS B ON A.UID = B.UID;

SELECT * FROM `SALE_2017` AS A
JOIN `MEMBER` AS B USING(`UID`)
JOIN `DEPART` AS C ON B.DEP = C.DEP;

SELECT A.SEQ, A.UID, A.SALE, B.NAME, B.POS FROM `SALE_2017` AS A
JOIN `MEMBER` AS B USING(`UID`)
JOIN `DEPART` AS C ON B.DEP = C.DEP;

SELECT * FROM `SALE_2017` AS A
JOIN `MEMBER` AS B USING(UID)
JOIN `DEPART` AS C USING(DEP)
WHERE `SALE` > 50000
ORDER BY `SALE` DESC;

#실습하기 4-10
SELECT * FROM `SALE_2017` LEFT JOIN `MEMBER` ON `SALE_2017`.UID = `MEMBER`.UID;
SELECT * FROM `SALE_2017` RIGHT JOIN `MEMBER` ON `SALE_2017`.UID = `MEMBER`.UID;
SELECT * FROM `SALE_2017` AS A RIGHT JOIN `MEMBER` AS B ON A.UID = B.UID;









